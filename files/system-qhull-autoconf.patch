--- a/configure.ac
+++ b/configure.ac
@@ -4615,15 +4615,26 @@ elif test "$with_qhull" = "yes" -o "$wit
     if test "$QHULL_SETTING" = "yes"; then
         QHULL_SETTING=external
         QHULL_INCLUDE_SUBDIR_IS_LIBQHULL=0
+        QHULL_REENTRANT=0
         LIBS="-lqhull $LIBS"
     fi
   fi
+  AC_CHECK_HEADERS([libqhull_r/libqhull_r.h])
   AC_CHECK_HEADERS([libqhull/libqhull.h])
-  if test "$ac_cv_header_libqhull_libqhull_h" = "yes"; then
+  if test "$ac_cv_header_libqhull_r_libqhull_r_h" = "yes"; then
+    AC_CHECK_LIB(qhull_r,qh_new_qhull,QHULL_SETTING=yes,QHULL_SETTING=no,)
+    if test "$QHULL_SETTING" = "yes"; then
+        QHULL_SETTING=external
+        QHULL_INCLUDE_SUBDIR_IS_LIBQHULL=1
+        QHULL_REENTRANT=1
+        LIBS="-lqhull_r $LIBS"
+    fi
+  elif test "$ac_cv_header_libqhull_libqhull_h" = "yes"; then
     AC_CHECK_LIB(qhull,qh_new_qhull,QHULL_SETTING=yes,QHULL_SETTING=no,)
     if test "$QHULL_SETTING" = "yes"; then
         QHULL_SETTING=external
         QHULL_INCLUDE_SUBDIR_IS_LIBQHULL=1
+        QHULL_REENTRANT=0
         LIBS="-lqhull $LIBS"
     fi
   fi
@@ -4634,15 +4645,18 @@ elif test "$with_qhull" = "yes" -o "$wit
     else
         QHULL_SETTING=internal
         QHULL_INCLUDE_SUBDIR_IS_LIBQHULL=1
+        QHULL_REENTRANT=0
     fi
   fi
 else
   QHULL_SETTING=internal
   QHULL_INCLUDE_SUBDIR_IS_LIBQHULL=1
+  QHULL_REENTRANT=0
 fi
 
 AC_SUBST([QHULL_SETTING],$QHULL_SETTING)
 AC_SUBST([QHULL_INCLUDE_SUBDIR_IS_LIBQHULL],$QHULL_INCLUDE_SUBDIR_IS_LIBQHULL)
+AC_SUBST([QHULL_REENTRANT],$QHULL_REENTRANT)
 
 dnl ---------------------------------------------------------------------------
 dnl Check if opencl library is available.
--- a/GDALmake.opt.in
+++ b/GDALmake.opt.in
@@ -309,6 +309,7 @@ SFCGAL_CFLAGS     =       @SFCGAL_CFLAGS
 
 QHULL_SETTING   =       @QHULL_SETTING@
 QHULL_INCLUDE_SUBDIR_IS_LIBQHULL   =       @QHULL_INCLUDE_SUBDIR_IS_LIBQHULL@
+QHULL_REENTRANT   =       @QHULL_REENTRANT@
 
 # GRASS Support
 
--- a/alg/GNUmakefile
+++ b/alg/GNUmakefile
@@ -25,7 +25,7 @@ CPPFLAGS 	:=	-DHAVE_ARMADILLO $(CPPFLAGS
 endif
 
 ifeq ($(QHULL_SETTING),external)
-CPPFLAGS 	:=	-DEXTERNAL_QHULL -DQHULL_INCLUDE_SUBDIR_IS_LIBQHULL=$(QHULL_INCLUDE_SUBDIR_IS_LIBQHULL) $(CPPFLAGS)
+CPPFLAGS 	:=	-DEXTERNAL_QHULL -DQHULL_INCLUDE_SUBDIR_IS_LIBQHULL=$(QHULL_INCLUDE_SUBDIR_IS_LIBQHULL) -DQHULL_REENTRANT=$(QHULL_REENTRANT) $(CPPFLAGS)
 endif
 ifeq ($(QHULL_SETTING),internal)
 CPPFLAGS 	:=	-DINTERNAL_QHULL $(CPPFLAGS)
--- a/alg/delaunay.c
+++ b/alg/delaunay.c
@@ -66,8 +66,13 @@ CPL_CVSID("$Id: delaunay.c d38086d97f76b
 #include "libqhull.h"
 #include "qset.h"
 #elif QHULL_INCLUDE_SUBDIR_IS_LIBQHULL
+# if !QHULL_REENTRANT
 #include "libqhull/libqhull.h"
 #include "libqhull/qset.h"
+# else
+#include "libqhull_r/libqhull_r.h"
+#include "libqhull_r/qset_r.h"
+# endif
 #else
 #include "qhull/libqhull.h"
 #include "qhull/qset.h"
@@ -78,10 +83,14 @@ CPL_CVSID("$Id: delaunay.c d38086d97f76b
 #endif /* HAVE_INTERNAL_OR_EXTERNAL_QHULL*/
 
 
-#if HAVE_INTERNAL_OR_EXTERNAL_QHULL
+#if !QHULL_REENTRANT && HAVE_INTERNAL_OR_EXTERNAL_QHULL
 static CPLMutex* hMutex = NULL;
 #endif
 
+#if !QHULL_REENTRANT && qh_QHpointer
+#define QH_QHPOINTER
+#endif
+
 /************************************************************************/
 /*                       GDALHasTriangulation()                         */
 /************************************************************************/
@@ -128,10 +137,17 @@ GDALTriangulation* GDALTriangulationCrea
     int* panMapQHFacetIdToFacetIdx; /* map from QHull facet ID to the index of our GDALTriFacet* array */
     int curlong, totlong;     /* memory remaining after qh_memfreeshort */
 
+#if QHULL_REENTRANT
+    qhT qh_qh;
+    qhT* qh = &qh_qh;
+
+    qh_zero(qh, stderr);
+#else
     /* QHull is not thread safe, so we need to protect all operations with a mutex */
     CPLCreateOrAcquireMutex(&hMutex, 1000);
+#endif
 
-#if qh_QHpointer  /* see user.h */
+#if QH_QHPOINTER  /* see user.h */
     if (qh_qh)
     {
         fprintf (stderr, "QH6238: Qhull link error.  The global variable qh_qh was not initialized\n\
@@ -145,7 +161,9 @@ GDALTriangulation* GDALTriangulationCrea
     points = (coordT*)VSI_MALLOC2_VERBOSE(sizeof(double)*2, nPoints);
     if( points == NULL )
     {
+#if !QHULL_REENTRANT
         CPLReleaseMutex(hMutex);
+#endif
         return NULL;
     }
     for(i=0;i<nPoints;i++)
@@ -159,8 +177,13 @@ GDALTriangulation* GDALTriangulationCrea
     /* Qc: keep coplanar points with nearest facet */
     /* Qz: add a point-at-infinity for Delaunay triangulation */
     /* Qt: triangulated output */
+#if QHULL_REENTRANT
+    if( qh_new_qhull(qh, 2, nPoints, points, FALSE /* ismalloc */,
+                      "qhull d Qbb Qc Qz Qt", NULL, stderr) != 0 )
+#else
     if( qh_new_qhull(2, nPoints, points, FALSE /* ismalloc */,
                       "qhull d Qbb Qc Qz Qt", NULL, stderr) != 0 )
+#endif
     {
         VSIFree(points);
         CPLError(CE_Failure, CPLE_AppDefined, "Delaunay triangulation failed");
@@ -170,7 +193,7 @@ GDALTriangulation* GDALTriangulationCrea
     VSIFree(points);
     points = NULL;
 
-#if qh_QHpointer  /* see user.h */
+#if QH_QHPOINTER  /* see user.h */
     if (qh_qh == NULL)
     {
         CPLReleaseMutex(hMutex);
@@ -179,31 +202,65 @@ GDALTriangulation* GDALTriangulationCrea
 #endif
 
     /* Establish a map from QHull facet id to the index in our array of sequential facets */
+#if QHULL_REENTRANT
+    panMapQHFacetIdToFacetIdx = (int*)VSI_MALLOC2_VERBOSE(sizeof(int), qh->facet_id);
+#else
     panMapQHFacetIdToFacetIdx = (int*)VSI_MALLOC2_VERBOSE(sizeof(int), qh facet_id);
+#endif
     if( panMapQHFacetIdToFacetIdx == NULL )
     {
         goto end;
     }
+#if QHULL_REENTRANT
+    memset(panMapQHFacetIdToFacetIdx, 0xFF, sizeof(int) * qh->facet_id);
+#else
     memset(panMapQHFacetIdToFacetIdx, 0xFF, sizeof(int) * qh facet_id);
+#endif
 
-    for(j = 0, facet = qh facet_list;
+#if QHULL_REENTRANT
+    facet = qh->facet_list;
+#else
+    facet = qh facet_list;
+#endif
+    for(j = 0;
         facet != NULL && facet->next != NULL;
         facet = facet->next)
     {
+        int vertexCount;
+        int neighbourCount;
-        if( facet->upperdelaunay != qh UPPERdelaunay )
+        boolT qhUPPERdelaunay;
+
+#if QHULL_REENTRANT
+        qhUPPERdelaunay = qh->UPPERdelaunay;
+#else
+        qhUPPERdelaunay = qh UPPERdelaunay;
+#endif
+
+        if( facet->upperdelaunay != qhUPPERdelaunay )
             continue;
 
-        if( qh_setsize(facet->vertices) != 3 ||
-            qh_setsize(facet->neighbors) != 3 )
+#if QHULL_REENTRANT
+        vertexCount = qh_setsize(qh, facet->vertices);
+        neighbourCount = qh_setsize(qh, facet->neighbors);
+#else
+        vertexCount = qh_setsize(facet->vertices);
+        neighbourCount = qh_setsize(facet->neighbors);
+#endif
+        if( vertexCount != 3 ||
+            neighbourCount != 3 )
         {
             CPLError(CE_Failure, CPLE_AppDefined,
                      "Triangulation resulted in non triangular facet %d: vertices=%d",
-                     facet->id, qh_setsize(facet->vertices));
+                     facet->id, vertexCount);
             VSIFree(panMapQHFacetIdToFacetIdx);
             goto end;
         }
 
+#if QHULL_REENTRANT
+        CPLAssert(facet->id < qh->facet_id);
+#else
         CPLAssert(facet->id < qh facet_id);
+#endif
         panMapQHFacetIdToFacetIdx[facet->id] = j++;
     }
 
@@ -219,20 +276,42 @@ GDALTriangulation* GDALTriangulationCrea
     psDT->pasFacets = pasFacets;
 
     // Store vertex and neighbor information for each triangle.
-    for(facet = qh facet_list;
+#if QHULL_REENTRANT
+    facet = qh->facet_list;
+#else
+    facet = qh facet_list;
+#endif
+    for(;
         facet != NULL && facet->next != NULL;
         facet = facet->next)
     {
         int k;
-        if( facet->upperdelaunay != qh UPPERdelaunay )
+        boolT qhUPPERdelaunay;
+
+#if QHULL_REENTRANT
+        qhUPPERdelaunay = qh->UPPERdelaunay;
+#else
+        qhUPPERdelaunay = qh UPPERdelaunay;
+#endif
+
+        if( facet->upperdelaunay != qhUPPERdelaunay )
             continue;
         k = panMapQHFacetIdToFacetIdx[facet->id];
+#if QHULL_REENTRANT
+        pasFacets[k].anVertexIdx[0] =
+            qh_pointid(qh, ((vertexT*) facet->vertices->e[0].p)->point);
+        pasFacets[k].anVertexIdx[1] =
+            qh_pointid(qh, ((vertexT*) facet->vertices->e[1].p)->point);
+        pasFacets[k].anVertexIdx[2] =
+            qh_pointid(qh, ((vertexT*) facet->vertices->e[2].p)->point);
+#else
         pasFacets[k].anVertexIdx[0] =
             qh_pointid(((vertexT*) facet->vertices->e[0].p)->point);
         pasFacets[k].anVertexIdx[1] =
             qh_pointid(((vertexT*) facet->vertices->e[1].p)->point);
         pasFacets[k].anVertexIdx[2] =
             qh_pointid(((vertexT*) facet->vertices->e[2].p)->point);
+#endif
         pasFacets[k].anNeighborIdx[0] =
             panMapQHFacetIdToFacetIdx[((facetT*) facet->neighbors->e[0].p)->id];
         pasFacets[k].anNeighborIdx[1] =
@@ -244,10 +323,15 @@ GDALTriangulation* GDALTriangulationCrea
     VSIFree(panMapQHFacetIdToFacetIdx);
 
 end:
+#if QHULL_REENTRANT
+    qh_freeqhull(qh, !qh_ALL);
+    qh_memfreeshort(qh, &curlong, &totlong);
+#else
     qh_freeqhull(!qh_ALL);
     qh_memfreeshort(&curlong, &totlong);
 
     CPLReleaseMutex(hMutex);
+#endif
 
     return psDT;
 #else /* HAVE_INTERNAL_OR_EXTERNAL_QHULL */
@@ -633,7 +717,7 @@ int GDALTriangulationFindFacetDirected(c
 
 void GDALTriangulationTerminate()
 {
-#if HAVE_INTERNAL_OR_EXTERNAL_QHULL
+#if !QHULL_REENTRANT && HAVE_INTERNAL_OR_EXTERNAL_QHULL
     if( hMutex != NULL )
     {
         CPLDestroyMutex(hMutex);
